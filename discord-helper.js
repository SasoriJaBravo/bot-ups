// Sistema otimizado de gerenciamento de intera√ß√µes do Discord
const { interactionManager, executeWithTimeoutProtection } = require('./interaction-manager.js');

// Fun√ß√£o de resposta r√°pida (compatibilidade com c√≥digo existente)
async function respostaRapida(interaction, opcoes) {
  return await interactionManager.smartResponse(interaction, {
    content: opcoes.content,
    embeds: opcoes.embeds,
    components: opcoes.components,
    ephemeral: opcoes.ephemeral,
    forceDefer: opcoes.defer
  });
}

// Fun√ß√£o de atualiza√ß√£o de resposta (compatibilidade com c√≥digo existente)
async function atualizarResposta(interaction, opcoes) {
  return await interactionManager.safeUpdate(interaction, {
    content: opcoes.content,
    embeds: opcoes.embeds,
    components: opcoes.components,
    ephemeral: opcoes.ephemeral
  });
}

// Opera√ß√£o segura otimizada
async function operacaoSegura(interaction, operacaoRapida, operacaoLenta, opcoes = {}) {
  return await executeWithTimeoutProtection(
    interaction,
    async () => {
      // Executa opera√ß√£o r√°pida
      let resultado = null;
      if (operacaoRapida) {
        resultado = await operacaoRapida();
        console.log("‚úÖ Opera√ß√£o r√°pida conclu√≠da");
      }
      
      // Executa opera√ß√£o lenta em background
      if (operacaoLenta) {
        setImmediate(async () => {
          try {
            await operacaoLenta(resultado);
            console.log("‚úÖ Opera√ß√£o lenta conclu√≠da em background");
          } catch (err) {
            console.error("‚ùå Erro na opera√ß√£o lenta:", err.message);
          }
        });
      }
      
      return resultado;
    },
    {
      initialMessage: opcoes.mensagemInicial || "‚è≥ Processando...",
      successMessage: opcoes.mensagemSucesso,
      successEmbeds: opcoes.embedsSucesso,
      successComponents: opcoes.componentsSucesso,
      errorMessage: opcoes.mensagemErro || "‚ùå Erro interno. Tente novamente.",
      ephemeral: opcoes.ephemeral !== false,
      forceDefer: opcoes.defer || false
    }
  );
}

// üßπ Limpa locks do Git antes de opera√ß√µes cr√≠ticas
async function limparLocksGit() {
  try {
    const { limparLock } = require('./salvar.js');
    limparLock();
    console.log("üßπ Locks do Git limpos");
  } catch (err) {
    console.error("‚ö†Ô∏è Erro ao limpar locks:", err.message);
  }
}

module.exports = {
  respostaRapida,
  atualizarResposta,
  operacaoSegura,
  limparLocksGit,
  interactionManager
};
